import java.util.Date 
import java.text.SimpleDateFormat
import org.openhab.core.library.types.*
 
//High-level goals variables
var String url = 'high_level_goals.conf'
var String urlsymptom = 'symptom.txt'
var String electricity_goal = null
var String temp_goal = null
var Number threshold //if goal is of temperature
var Date date_beg = null
var Date date_end = null

var boolean isdaytime = false

var Timer windowsAlarm = null

rule Startup
when 
	System started
then
	//discover all (already) defined high-level goals
	logDebug( "mylogs", "STARTING DECISION.RULES...." )
	val fileReader = new java.io.FileReader(url)
	try {
		var String lastGoal = ""
	    val values = new java.io.BufferedReader(fileReader) 
	
		var String s = values.readLine
		while (s != null) {
		    logDebug( "mylogs", "READ FROM FILE: " + s)
			
			if(s.contains("ELEC")) {
				electricity_goal = s
			}
			if(s.contains("KEEP")) {
				temp_goal = s
			}
			if(s.equals("WINDOW") || s.contains("KEEP") || s.contains("ELEC")) {
				lastGoal = s
				logDebug( "mylogs", "LAST GOAL: " + s)
			}
			else {
				if(lastGoal.equals("WINDOW")) {
					if(date_beg == null) {
						date_beg = new SimpleDateFormat("HH:mm").parse(s)
						logDebug( "mylogs", "SET DATE_BEG")
					} else {
						date_end = new SimpleDateFormat("HH:mm").parse(s)
						logDebug( "mylogs", "SET DATE_END")
					}
				}
				else if(lastGoal.contains("KEEP")) {
					threshold = Float::parseFloat(s)
					logDebug( "mylogs", "SET TRHESHOLD")
				}
			}
			s = values.readLine
		}
		} finally {
		    try { fileReader.close() } catch (Exception e) {}
		}	
	logDebug( "mylogs", electricity_goal )
	logDebug( "mylogs", threshold.toString )
	logDebug( "mylogs", date_beg.toString )
	logDebug( "mylogs", date_end.toString )
	logDebug( "mylogs", "END DECISION.RULES...." )
end

rule "Windows goal"
when
	Item Windows_symptom received update
then
	if(Windows_symptom.state instanceof String && date_beg != null) { //date_beg != null means if there is Windows goal
		var String goal = Windows_symptom.state.toString
		//logDebug("mylogs", "goal win:"+goal)
		if(goal.equals("GETTING TO DATE TO OPEN WINDOWS")) {
			//notify open windows to execution
			val results = executeCommandLine("java -jar Execution.jar \"open windows\"", 5000)
		}
		else if(goal.equals("GETTING TO DATE TO CLOSE WINDOWS")) {
			//notify close windows to execution
			val results = executeCommandLine("java -jar Execution.jar \"close windows\"", 5000)
		}
	}
end

rule "Electricity goal"
when
	Item Electricity_symptom received update
then
	if(Electricity_symptom.state instanceof String) {
		var String goal = Electricity_symptom.state.toString
		//logDebug("mylogs", "goal elec:"+goal)
		if(electricity_goal.equals("ELEC_MIN")) {
			val String room = s.substring(0, s.length() - 5).toLowerCase
			val results = executeCommandLine("java -jar Execution.jar \"close lights: \" \"" + room + "\"", 5000)
			//logDebug( "mylogs", "RESULTS=" + results )
		}
	}
end

rule "Temperature goal"
when
	Item Temperature_symptom received update
then
	if(Temperature_symptom.state instanceof String && temp_goal != null && !temp_goal.equals("")) {
		var String goal = Temperature_symptom.state.toString
		//logDebug("mylogs", "goal temp:"+goal)
		if(goal.contains("GROWING UP")) {
			if(goal.endsWith("THR DOWN") && temp_goal.contains("FRESH")) {
				//open windows and decrease temperature
				val results = executeCommandLine("java -jar Execution.jar \"open windows\"", 5000)
				val results = executeCommandLine("java -jar Execution.jar \"temperature: \" \"" + threshold + "\"", 5000)
			}
		}
		else if(goal.contains("GROWING DOWN")) {
			if(goal.endsWith("THR ABOVE") && temp_goal.contains("WARM")) {
				//open windows and decrease temperature
				val results = executeCommandLine("java -jar Execution.jar \"close windows\"", 5000)
				val results = executeCommandLine("java -jar Execution.jar \"temperature: \" \"" + threshold + "\"", 5000)
			}
		}
	}
end


//	Time cron "0 * * * * ?"  //every minute

rule "Turn window on"
when
	Item LivingRoom_Windows_l1 changed
then
	var String todo = "close"
	if(LivingRoom_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " window: \" \"LivingRoom_Windows_l1\"", 5000)
end
 
rule "Turn window on"
when
	Item LivingRoom_Windows_l2 changed
then
	var String todo = "close"
	if(LivingRoom_Windows_l2.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " window: \" \"LivingRoom_Windows_l2\"", 5000)
end

rule "Turn window on"
when
	Item LivingRoom_Windows_l3 changed
then
	var String todo = "close"
	if(LivingRoom_Windows_l3.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " window: \" \"LivingRoom_Windows_l3\"", 5000)
end

rule "Turn window on"
when
	Item Kitchen_Windows_l1 changed
then
	var String todo = "close"
	if(Kitchen_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " window: \" \"Kitchen_Windows_l1\"", 5000)
end

rule "Turn window on"
when
	Item Kitchen_Windows_l2 changed
then
	var String todo = "close"
	if(Kitchen_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " window: \" \"Kitchen_Windows_l2\"", 5000)
end

rule "Turn window on"
when
	Item SleepingRoom_Windows_l1 changed
then
	var String todo = "close"
	if(SleepingRoom_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " window: \" \"SleepingRoom_Windows_l1\"", 5000)
end

rule "Turn window on"
when
	Item Bathroom_Windows_l1 changed
then
	var String todo = "close"
	if(Bathroom_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " window: \" \"Bathroom_Windows_l1\"", 5000)
end




rule "Turn light on"
when
	Item LivingRoom_Lights_l1 changed
then
	var String todo = "close"
	logDebug("mylogs", "Turn light 1 on " + LivingRoom_Lights_l1.state )
	if(LivingRoom_Lights_l1.state == ON) todo = "open"
	logDebug("mylogs", "Turn light 1 on "+todo)
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light: \" \"LivingRoom_Lights_l1\"", 5000)
	logDebug("mylogs", results)
end

rule "Turn light on"
when
	Item LivingRoom_Lights_l2 changed
then
	var String todo = "close"
	if(LivingRoom_Lights_l2.state == ON) todo = "open"
	logDebug("mylogs", "living room light l2 is: "+LivingRoom_Lights_l2.state)
	logDebug("mylogs", "command is "+todo)
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light: \" \"LivingRoom_Lights_l2\"", 5000)
end

rule "Turn light on"
when
	Item LivingRoom_Lights_l3 changed
then
	var String todo = "close"
	if(LivingRoom_Lights_l3.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light: \" \"LivingRoom_Lights_l3\"", 5000)
	//logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn light on"
when
	Item Kitchen_Lights_l1 changed
then
	var String todo = "close"
	if(Kitchen_Lights_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light: \" \"Kitchen_Lights_l1\"", 5000)
end

rule "Turn light on"
when
	Item Kitchen_Lights_l2 changed
then
	var String todo = "close"
	if(Kitchen_Lights_l2.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light: \" \"Kitchen_Lights_l2\"", 5000)
end

rule "Turn light on"
when
	Item SleepingRoom_Lights_l1 changed
then
	var String todo = "close"
	if(SleepingRoom_Lights_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light: \" \"SleepingRoom_Lights_l1\"", 5000)
end

rule "Turn light on"
when
	Item SleepingRoom_Lights_l2 changed
then
	var String todo = "close"
	if(SleepingRoom_Lights_l2.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light: \" \"SleepingRoom_Lights_l2\"", 5000)
end

rule "Turn light on"
when
	Item Bathroom_Lights_l1 changed
then
	var String todo = "close"
	if(Bathroom_Lights_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light: \" \"Bathroom_Lights_l1\"", 5000)
end