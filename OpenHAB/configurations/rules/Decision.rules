import java.util.Date 
import java.text.SimpleDateFormat
import org.openhab.core.library.types.*
 
//High-level goals variables
//var String url = 'high_level_goals.conf'
var String electricity_goal = null
var String temp_goal = null
var Number threshold //if goal is of temperature
var String date_beg = null
var String date_end = null



var Timer windowsAlarm = null


rule "Set window goal" //goals/window
when
	Item Window_goal received update
then
	var String goal = Window_goal.state.toString
	val s 	= goal.split("-")
	date_beg = s.get(0)
	logDebug( "mylogs", "SET DATE_BEG: " + date_beg)
	date_end = s.get(1)
	logDebug( "mylogs", "SET DATE_END: " + date_end)
end 

rule "Set electricity goal"
when
	Item Electricity_goal received update
then
	logDebug("mylogs", Electricity_goal.state.toString + "QUIIIIIIIIIIIIIIIIIIIIIIIIII")
	electricity_goal = Electricity_goal.state.toString
	logDebug("mylogs", "electricity_goal: " + electricity_goal)
end

rule "Set temperature goal" //goals/temperature
when
	Item Temperature_goal received update
then
	var String 		t 			= Temperature_goal.state.toString
	val 			s 			= t.split(" ")
					temp_goal 	= s.get(0)
					threshold 	= Float::parseFloat(s.get(1))
	logDebug("mylogs", temp_goal + ": " + threshold )
end

//................................................................................

rule "Windows goal" //symptoms/windows
when
	Item Windows_symptom received update
then
	logDebug("mylogs", "sdjas")
	logDebug("mylogs", "date_beg " + date_beg)
	if(date_beg != null) { //date_beg != null means if there is Windows goal
		logDebug("mylogs", "shdais")
		var String goal = Windows_symptom.state.toString
		logDebug("mylogs", "goal win:" + goal)
		if(goal != null && goal.equals("GETTING TO DATE TO OPEN WINDOWS")) {
			//notify open windows to StoreDecision
			val results = executeCommandLine("java -jar StoreDecision.jar \"open windows: \"", 5000)
			logDebug("mylogs", results)
		}
		else if(goal != null && goal.equals("GETTING TO DATE TO CLOSE WINDOWS")) {
			//notify close windows to StoreDecision
			val results = executeCommandLine("java -jar StoreDecision.jar \"close windows: \"", 5000)
			logDebug("mylogs", results)
		}
	}
end

rule "Electricity goal"
when
	Item Electricity_symptom received update
then
	var String goal = Electricity_symptom.state.toString
	logDebug("mylogs", "goal elec:"+goal + "; electricity_goal:"+electricity_goal)
	if(electricity_goal != null && electricity_goal.equals("ELEC_MIN") && goal.contains("VOID")) { //example: kitchen VOID
		val String room = goal.substring(0, goal.length() - 5).toLowerCase //VOID = 5
		val results = executeCommandLine("java -jar StoreDecision.jar \"close lights: \" \"" + room + "\"", 5000)
		logDebug( "mylogs", "RESULTS=" + results )
	}
end

rule "Temperature goal" //symptoms/temperature
when
	Item Temperature_symptom received update
then
	logDebug("mylogs", "temp. goal: " + temp_goal + "; symptom: " + Temperature_symptom.state.toString)
	if(temp_goal != null && !temp_goal.equals("")) {
		var String goal = Temperature_symptom.state.toString
		logDebug("mylogs", "goal temp:" + goal)
		if(goal != null && goal.contains("GROWING UP")) { //case symptom is temperature growing up
			if(goal.endsWith("THR DOWN") && temp_goal.contains("FRESH")) {
				//open windows and decrease temperature
				val results = executeCommandLine("java -jar StoreDecision.jar \"open windows: \"", 5000)
				results = executeCommandLine("java -jar StoreDecision.jar \"temperature: \" \"" + threshold + "\"", 5000)
				logDebug("mylogs", results)
			}
		}
		else if(goal != null && goal.contains("GROWING DOWN")) { //case symptom is temperature growing down
			if(goal.endsWith("THR ABOVE") && temp_goal.contains("WARM")) {
				//open windows and decrease temperature
				val results = executeCommandLine("java -jar StoreDecision.jar \"close windows: \"", 5000)
				results = executeCommandLine("java -jar StoreDecision.jar \"temperature: \" \"" + threshold + "\"", 5000)
			}
		}
		else if(goal != null && goal.contains("STABILITY")) { //case symptom is stability
			if(temp_goal.contains("WARM") && goal.contains("THR ABOVE")) {
				val results = executeCommandLine("java -jar StoreDecision.jar \"close windows: \"", 5000)
				results = executeCommandLine("java -jar StoreDecision.jar \"temperature: \" \"" + threshold + "\"", 5000)
			}
			else if(temp_goal.contains("FRESH") && goal.endsWith("THR DOWN")) {
				val results = executeCommandLine("java -jar StoreDecision.jar \"open windows: \"", 5000)
				results = executeCommandLine("java -jar StoreDecision.jar \"temperature: \" \"" + threshold + "\"", 5000)
			}
		}
	}
end


//	Time cron "0 * * * * ?"  //every minute

rule "Turn window on"
when
	Item LivingRoom_Windows_l1 changed
then
	var String todo = "close"
	if(LivingRoom_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " window: \" \"LivingRoom_Windows_l1\"", 5000)
end
 
rule "Turn window on"
when
	Item LivingRoom_Windows_l2 changed
then
	var String todo = "close"
	if(LivingRoom_Windows_l2.state == ON) todo = "open"
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " window: \" \"LivingRoom_Windows_l2\"", 5000)
end

rule "Turn window on"
when
	Item LivingRoom_Windows_l3 changed
then
	var String todo = "close"
	if(LivingRoom_Windows_l3.state == ON) todo = "open"
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " window: \" \"LivingRoom_Windows_l3\"", 5000)
end

rule "Turn window on"
when
	Item Kitchen_Windows_l1 changed
then
	var String todo = "close"
	if(Kitchen_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " window: \" \"Kitchen_Windows_l1\"", 5000)
end

rule "Turn window on"
when
	Item Kitchen_Windows_l2 changed
then
	var String todo = "close"
	if(Kitchen_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " window: \" \"Kitchen_Windows_l2\"", 5000)
end

rule "Turn window on"
when
	Item SleepingRoom_Windows_l1 changed
then
	var String todo = "close"
	if(SleepingRoom_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " window: \" \"SleepingRoom_Windows_l1\"", 5000)
end

rule "Turn window on"
when
	Item Bathroom_Windows_l1 changed
then
	var String todo = "close"
	if(Bathroom_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " window: \" \"Bathroom_Windows_l1\"", 5000)
end




rule "Turn light on"
when
	Item LivingRoom_Lights_l1 changed
then
	var String todo = "close"
	logDebug("mylogs", "Turn light 1 on " + LivingRoom_Lights_l1.state )
	if(LivingRoom_Lights_l1.state == ON) todo = "open"
	logDebug("mylogs", "Turn light 1 on "+todo)
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " light: \" \"LivingRoom_Lights_l1\"", 5000)
	logDebug("mylogs", results)
end

rule "Turn light on"
when
	Item LivingRoom_Lights_l2 changed
then
	var String todo = "close"
	if(LivingRoom_Lights_l2.state == ON) todo = "open"
	logDebug("mylogs", "living room light l2 is: "+LivingRoom_Lights_l2.state)
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " light: \" \"LivingRoom_Lights_l2\"", 5000)
end

rule "Turn light on"
when
	Item LivingRoom_Lights_l3 changed
then
	var String todo = "close"
	if(LivingRoom_Lights_l3.state == ON) todo = "open"
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " light: \" \"LivingRoom_Lights_l3\"", 5000)
	//logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn light on"
when
	Item Kitchen_Lights_l1 changed
then
	var String todo = "close"
	if(Kitchen_Lights_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " light: \" \"Kitchen_Lights_l1\"", 5000)
end

rule "Turn light on"
when
	Item Kitchen_Lights_l2 changed
then
	var String todo = "close"
	if(Kitchen_Lights_l2.state == ON) todo = "open"
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " light: \" \"Kitchen_Lights_l2\"", 5000)
end

rule "Turn light on"
when
	Item SleepingRoom_Lights_l1 changed
then
	var String todo = "close"
	if(SleepingRoom_Lights_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " light: \" \"SleepingRoom_Lights_l1\"", 5000)
end

rule "Turn light on"
when
	Item SleepingRoom_Lights_l2 changed
then
	var String todo = "close"
	if(SleepingRoom_Lights_l2.state == ON) todo = "open"
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " light: \" \"SleepingRoom_Lights_l2\"", 5000)
end

rule "Turn light on"
when
	Item Bathroom_Lights_l1 changed
then
	var String todo = "close"
	if(Bathroom_Lights_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar StoreDecision.jar \"" + todo + " light: \" \"Bathroom_Lights_l1\"", 5000)
end